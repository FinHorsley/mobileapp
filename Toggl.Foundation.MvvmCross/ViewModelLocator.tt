<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions"#>
<#@ output extension=".cs" #>
using System;
using MvvmCross.Navigation;
using MvvmCross.ViewModels;
using Toggl.Foundation.MvvmCross.ViewModels;
using Toggl.Foundation.MvvmCross.ViewModels.Calendar;
using Toggl.Foundation.MvvmCross.ViewModels.Reports;
using Toggl.Foundation.MvvmCross.ViewModels.ReportsCalendar;
using Toggl.Foundation.MvvmCross.ViewModels.Selectable;
using Toggl.Foundation.MvvmCross.ViewModels.Settings;

namespace Toggl.Foundation.MvvmCross
{
    public sealed class TogglViewModelLocator : MvxDefaultViewModelLocator
    {
        private readonly FoundationUiDependencyContainer dependencyContainer;

        public TogglViewModelLocator(IMvxNavigationService navigationService, FoundationUiDependencyContainer dependencyContainer)
            : base(navigationService)
        {
            this.dependencyContainer = dependencyContainer;
        }

        public override IMvxViewModel Load(Type viewModelType, IMvxBundle parameterValues, IMvxBundle savedState)
        {
            var viewModel = findViewModel(viewModelType);

            RunViewModelLifecycle(viewModel, parameterValues, savedState);

            return viewModel;
        }

        public override IMvxViewModel<TParameter> Load<TParameter>(Type viewModelType, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState)
        {
            var viewModel = findViewModel(viewModelType) as IMvxViewModel<TParameter>;

            RunViewModelLifecycle(viewModel, param, parameterValues, savedState);

            return viewModel;
        }

        private IMvxViewModel findViewModel(Type viewModelType)
        {
<#
    const string ifLine = "            if(viewModelType == typeof({0}))";
    const string returnLine = "                return new {0}({1});";
    
    Func<string, bool> fileIsValid = fileName => 
        !(fileName.Contains(".DS_Store") || fileName.Contains("Hint") || fileName.Contains("QuickSelectShortcut") || fileName.Contains("ReportsBarChartViewModel"));
        
    Func<string, bool> isLazy = propName =>
         !propName.StartsWith("LoginManager") && !propName.StartsWith("PlatformInfo");
         
     Func<string, string> selectDependencyContainerPropertyName = dep => 
    {
        var dependencyType = dep
            .Split(' ')
            .First()
            .Replace("Toggl", "")
            .Replace("Mvx", "");

        var propName = dependencyType.Substring(1, dependencyType.Length - 1);
        if (propName.StartsWith("I") && !propName.StartsWith("Interactor"))
        {
            propName = propName.Substring(1, propName.Length - 1);
        }

        if (isLazy(propName))
        {
            propName += ".Value";
        }

        return $"dependencyContainer.{propName}";
    };

    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var viewmodelsFolder = Path.Combine(filePath, "ViewModels/" );
    var viewModels = Directory.EnumerateFiles(viewmodelsFolder, "*.*", SearchOption.AllDirectories).Where(fileIsValid);

    foreach(var vm in viewModels)
    {
        var vmName = Path.GetFileName(vm).Replace(".cs", "");
        try
        {
        var vmFile = File.ReadAllText(vm);
        var ctorSignature = "public " + vmName;
        var index = vmFile.IndexOf(ctorSignature);
        var firstDependencyIndex = index + ctorSignature.Length + 1;
        var lengthOfDependencyString = vmFile.IndexOf(")", index) - firstDependencyIndex;
        var dependencies = vmFile
            .Substring(firstDependencyIndex, lengthOfDependencyString)
            .Replace("  ", "")
            .Split(',')
            .Select(selectDependencyContainerPropertyName);

        var dependencyInjection = string.Join(", ", dependencies);

        WriteLine(string.Format(ifLine, vmName));
        WriteLine(string.Format(returnLine, vmName, dependencyInjection));
        WriteLine("");
        }
        catch(Exception ex)
        {
            WriteLine($"Failed for ViewModel {vm}");
        }
    }
#>

            return default(MvxViewModel);
        }
    }
}