<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions"#>
<#@ output extension=".cs" #>using System;
using MvvmCross.ViewModels;
using Toggl.Foundation.MvvmCross.ViewModels;
using Toggl.Foundation.MvvmCross.ViewModels.Calendar;
using Toggl.Foundation.MvvmCross.ViewModels.Reports;
using Toggl.Foundation.MvvmCross.ViewModels.Settings;

namespace Toggl.Foundation.MvvmCross
{
    public sealed class TogglViewModelLocator : MvxDefaultViewModelLocator
    {
        private readonly UiDependencyContainer dependencyContainer;

        public TogglViewModelLocator(UiDependencyContainer dependencyContainer)
            : base(dependencyContainer.NavigationService)
        {
            this.dependencyContainer = dependencyContainer;
        }

        public override IMvxViewModel Load(Type viewModelType, IMvxBundle parameterValues, IMvxBundle savedState)
        {
            var viewModel = findViewModel(viewModelType);

            RunViewModelLifecycle(viewModel, parameterValues, savedState);

            return viewModel;
        }

        public override IMvxViewModel<TParameter> Load<TParameter>(Type viewModelType, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState)
        {
            var viewModel = findViewModel(viewModelType) as IMvxViewModel<TParameter>;

            RunViewModelLifecycle(viewModel, param, parameterValues, savedState);

            return viewModel;
        }

        private IMvxViewModel findViewModel(Type viewModelType)
        {
<#
    const string ifLine = "            if (viewModelType == typeof({0}))";
    const string returnLine = "                return new {0}({1});";
    
    Func<string, bool> fileIsValid = fileName => 
        !(fileName.Contains(".DS_Store") 
		|| fileName.Contains("Selectable")
		|| fileName.Contains("Hint") 
		|| fileName.Contains("QuickSelectShortcut") 
		|| fileName.Contains("ReportsBarChartViewModel")
		|| fileName.Contains("Base")
		|| fileName.Contains("ReportsCalendarDay")
		|| fileName.Contains("ReportsCalendarPage")
		|| fileName.Contains("\\BarViewModel")
		|| fileName.Contains("TimeEntriesViewModel")
		|| fileName.Contains("UserCalendarSourceViewModel")
		|| fileName.Contains("/TimeEntryViewModel"));
                 
    Func<string, string> selectDependencyContainerPropertyName = dep => 
    {
        var dependencyType = dep
			.Trim()
            .Split(' ')
            .First()
            .Replace("Forking", "")
            .Replace("Toggl", "")
            .Replace("Mvx", "");

        var propName = dependencyType.Substring(1, dependencyType.Length - 1);
        return $"dependencyContainer.{propName}";
    };

    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var viewmodelsFolder = Path.Combine(filePath, "ViewModels/" );
    var viewModels = Directory.EnumerateFiles(viewmodelsFolder, "*.*", SearchOption.AllDirectories).Where(fileIsValid);

    foreach(var vm in viewModels)
    {

        var vmName = Path.GetFileName(vm).Replace(".cs", "");
        var vmFile = File.ReadAllText(vm);
        var ctorSignature = "public " + vmName;
        var ctorCodeIndex = vmFile.IndexOf(ctorSignature);
        var firstDependencyIndex = ctorCodeIndex + ctorSignature.Length + 1;
        var lengthOfDependencyString = vmFile.IndexOf(")", ctorCodeIndex) - firstDependencyIndex;
		var dependencyList = vmFile.Substring(firstDependencyIndex, lengthOfDependencyString)
            .Replace("  ", "")
            .Replace("\n", "")
            .Split(',');

        var dependencies = dependencyList
            .Select(selectDependencyContainerPropertyName)
			.ToList();
			
        var dependencyInjection =  "\n                    " + string.Join(",\n                    ", dependencies);

        WriteLine(string.Format(ifLine, vmName));
        WriteLine(string.Format(returnLine, vmName, dependencyInjection));
		WriteLine("");
    }
#>

            throw new InvalidOperationException($"Trying to locate ViewModel {viewModelType.Name} failed.");
        }
    }
}